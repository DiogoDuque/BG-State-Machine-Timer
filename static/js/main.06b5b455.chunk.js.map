{"version":3,"sources":["TimerCard.js","MyCard.js","State.js","GoTStateMachine.js","SpiritIslandStateMachine.js","App.js","serviceWorker.js","index.js"],"names":["TimerCard","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","minutes","seconds","intervalHandle","secondsRemaining","tick","bind","assertThisInitialized","startCountDown","pauseCountDown","resumeCountDown","updateTimer","clearInterval","setState","min","Math","floor","sec","value","refs","audio","play","time","setInterval","_this$props","classes","title","_this$state","react_default","a","createElement","index_es","className","card","color","gutterBottom","variant","concat","key","size","onClick","ref","src","preload","Component","MyCard","timercard","changeState","round","name","TimerCard_TimerCard","style","display","flexWrap","nextStates","map","s","i","marginBottom","clickable","label","chip","withStyles","minWidth","bullet","margin","transform","fontSize","pos","State","arguments","length","undefined","getNextStateNames","names","forEach","push","addNextState","toString","GoTStateMachine","spiritPhase","fastPowerPhase","playFastPower","invaderPhase","blightedIslandEffect","fearEffect","ravage","build","explore","advCards","slowPowerPhase","playSlowPower","timePasses","discardFearCards","currentState","currentRound","modState","src_MyCard","App","SpiritIslandStateMachine_GoTStateMachine","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.06b5b455.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Card, CardActions, CardContent, Button, Typography } from '@material-ui/core';\n\nexport default class TimerCard extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      minutes: '0',\n      seconds: '00',\n      intervalHandle: null,\n    }\n\n    this.secondsRemaining = 0;\n\n    this.tick = this.tick.bind(this);\n    this.startCountDown = this.startCountDown.bind(this);\n    this.pauseCountDown = this.pauseCountDown.bind(this);\n    this.resumeCountDown = this.resumeCountDown.bind(this);\n    this.updateTimer = this.updateTimer.bind(this);\n  }\n\n  componentDidMount() {\n    this.startCountDown();\n  }\n\n  componentWillUnmount() {\n    clearInterval(this.state.intervalHandle);\n    this.setState({intervalHandle:null});\n  }\n\n  updateTimer() {\n    clearInterval(this.state.intervalHandle);\n    this.setState({intervalHandle:null});\n    this.startCountDown();\n  }\n\n  tick() {\n    var min = Math.floor(this.secondsRemaining / 60);\n    var sec = this.secondsRemaining - (min * 60);\n    this.setState({\n      minutes: min,\n      seconds: sec\n    })\n    if (sec < 10) {\n      this.setState({\n        seconds: \"0\" + this.state.seconds,\n      })\n    }\n    if (min < 10) {\n      this.setState({\n        value: \"0\" + min,\n      })\n    }\n    if (min === 0 & sec === 0) {\n      clearInterval(this.state.intervalHandle);\n      this.setState({intervalHandle:null});\n      this.refs.audio.play();\n      //const snd = new Audio(\"clock.mp3\");\n      //snd.play();\n    }\n    this.secondsRemaining--;\n  }\n\n  startCountDown() {\n    if(this.props.time === 0) {\n      this.setState({minutes:'0', seconds:'00'})\n    } else {\n      this.setState({intervalHandle: setInterval(this.tick, 1000)});\n      this.secondsRemaining = this.props.time;\n    }\n  }\n\n  pauseCountDown() {\n    if(this.props.time !== 0) {\n      clearInterval(this.state.intervalHandle);\n      this.setState({intervalHandle:null});\n    }\n  }\n\n  resumeCountDown() {\n    this.setState({intervalHandle: setInterval(this.tick, 1000)});\n  }\n\n  render() {\n    const { classes, title, time } = this.props;\n    const { minutes, seconds } = this.state;\n    return (\n      <div>\n        <Card className={classes.card}>\n          <CardContent>\n            <Typography className={classes.title} color=\"textSecondary\" gutterBottom variant=\"h6\">\n              {title}\n            </Typography>\n            <Typography variant=\"h3\">\n              {`${minutes}:${seconds}`}\n            </Typography>\n          </CardContent>\n          <CardActions>\n            {time !== 0 && [\n              (this.state.intervalHandle != null ?\n                <Button key={101} size=\"medium\" color=\"primary\" onClick={this.pauseCountDown}>Pause</Button> :\n                <Button key={102} size=\"medium\" color=\"primary\" onClick={this.resumeCountDown}>Resume</Button>),\n                <Button key={103} size=\"medium\" color=\"primary\" onClick={this.updateTimer}>Reset</Button>\n              ]}\n          </CardActions>\n        </Card>\n        <audio ref=\"audio\" src=\"clock.mp3\" preload=\"auto\"></audio>\n      </div>\n    );\n  }\n}","import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Card, CardActions, CardContent, Typography, Divider, Chip } from '@material-ui/core';\nimport TimerCard from './TimerCard';\n\nconst styles = {\n  card: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n};\n\nclass MyCard extends Component {\n  componentDidUpdate() {\n    this.refs.timercard.updateTimer();\n  }\n\n  render() {\n    const { classes, state, changeState, round } = this.props;\n    const { name, time } = state;\n    return(\n      <div>\n      <Card className={classes.card}>\n        <CardContent>\n          <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n            Round: {round}\n          </Typography>\n        </CardContent>\n      </Card>\n      <Divider/>\n      <TimerCard classes={classes} time={time} title={name} ref=\"timercard\" />\n      <Divider/>\n      <Card>\n        <CardContent>\n        <Typography className={classes.title} gutterBottom variant=\"h5\">\n            Next Actions\n          </Typography>\n        </CardContent>\n        <CardActions style={{display: 'flex',flexWrap: 'wrap'}}>\n          {state.nextStates.map((s,i) => <Chip key={i} style={{marginBottom: 10}} clickable label={s.name} className={classes.chip} onClick={() => changeState(s)} />)}\n        </CardActions>\n      </Card>\n    </div>\n    );\n  }\n};\n\nMyCard.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MyCard);","export default function State(name, time=0) {\n    this.name = name;\n    this.time = time;\n    this.nextStates = [];\n  \n    this.getNextStateNames = () => {\n      const names = [];\n      this.nextStates.forEach(s => {\n        names.push(s.name);\n      })\n      return names;\n    };\n  \n    this.addNextState = (state) => {\n      this.nextStates.push(state);\n    };\n  \n    this.toString = () => {\n      return `${this.name}={${this.time},${this.getNextStateNames()}}`;\n    }\n  }","import React, { Component } from 'react';\nimport MyCard from './MyCard';\nimport State from './State';\n\nexport default class GoTStateMachine extends Component {\n  constructor() {\n    super();\n\n    //WESTEROS PHASE\n    const west_cards = new State('Reveal Westeros cards');\n    //PLANNING PHASE\n    const plan_assign = new State('Assign Orders',360);\n    const plan_reveal = new State('Reveal Orders');\n    const plan_raven = new State('Use Messenger Raven', 45);\n    //ACTION PHASE\n    const act_raid = new State('Raid Orders',30);\n    const act_march = new State('March Orders',30);\n    const act_consolidate = new State('Consolidate Power Orders');\n    //ACTION PHASE - BATTLE\n    const bat_support = new State('Battle: Call support',20);\n    const bat_calc = new State('Battle: Say initial strengths');\n    const bat_cards = new State('Battle: House cards',90);\n    const bat_blade = new State('Battle: Valyrian Steel Blade');\n    const bat_finish = new State('Battle: Resolution');\n    //EVENTS\n    const supply = new State('Supply');\n    const mustering = new State('Mustering (per castle)',45);\n    const clash = new State('Clash of Kings (per track)',30);\n    const wildlings = new State('Wildlings Attack',45);\n\n\n    //WESTEROS PHASE\n    west_cards.addNextState(plan_assign);\n    west_cards.addNextState(supply);\n    west_cards.addNextState(mustering);\n    west_cards.addNextState(clash);\n    west_cards.addNextState(wildlings);\n    //PLANNING PHASE\n    plan_assign.addNextState(plan_reveal);\n    plan_reveal.addNextState(plan_raven);\n    plan_raven.addNextState(act_raid);\n    //ACTION PHASE\n    act_raid.addNextState(act_march);\n    act_march.addNextState(bat_support);\n    act_march.addNextState(act_consolidate);\n    act_consolidate.addNextState(west_cards);\n    act_consolidate.addNextState(mustering);\n    //ACTION PHASE - BATTLE\n    bat_support.addNextState(bat_calc);\n    bat_calc.addNextState(bat_cards);\n    bat_cards.addNextState(bat_blade);\n    bat_cards.addNextState(bat_finish);\n    bat_blade.addNextState(bat_finish);\n    bat_finish.addNextState(act_march);\n\n    this.state={\n      currentState: plan_assign,\n      currentRound: 1,\n    };\n\n    this.changeState = this.changeState.bind(this);\n  }\n\n  changeState(state) {\n    if(this.state.currentState.name === 'Consolidate Power Orders' && state.name === 'Reveal Westeros cards')\n      this.setState({currentRound: this.state.currentRound+1});\n    if(state.nextStates.length === 0)\n    {\n      const modState = new State(state.name, state.time);\n      modState.addNextState(this.state.currentState);\n      modState.addNextState(modState);\n      this.setState({\n        currentState: modState,\n      });\n    }\n    else this.setState({\n      currentState: state,\n    });\n  }\n\n  render() {\n    const { currentState, currentRound } = this.state;\n    return <MyCard round={currentRound} state={currentState} changeState={this.changeState} />;\n  }\n};\n","import React, { Component } from 'react';\nimport MyCard from './MyCard';\nimport State from './State';\n\nexport default class GoTStateMachine extends Component {\n  constructor() {\n    super();\n\n    //SPIRIT PHASE\n    const spiritPhase = new State('Spirit Phase (Growth, Energy & Choose Powers)', 360);\n    //FAST POWER PHASE\n    const fastPowerPhase = new State('Fast Power Phase');\n    const playFastPower = new State('Play Fast Power', 30);\n    //INVADER PHASE\n    const invaderPhase = new State('Invader Phase');\n    const blightedIslandEffect = new State('Blighted Island Effect', 30);\n    const fearEffect = new State('Fear Effect', 60);\n    const ravage = new State('Ravage', 90);\n    const build = new State('Build', 90);\n    const explore = new State('Build', 90);\n    const advCards = new State('Advance Invader Cards');\n    //SLOW POWER PHASE\n    const slowPowerPhase = new State('Slow Power Phase');\n    const playSlowPower = new State('Play Slow Power', 60);\n    //TIME PASSES\n    const timePasses = new State('Time Passes');\n    const discardFearCards = new State('Discard Fear Cards');\n\n\n    //SPIRIT PHASE\n    spiritPhase.addNextState(fastPowerPhase);\n    //FAST POWER PHASE\n    fastPowerPhase.addNextState(playFastPower);\n    fastPowerPhase.addNextState(invaderPhase);\n    playFastPower.addNextState(fastPowerPhase);\n    //INVADER PHASE\n    invaderPhase.addNextState(blightedIslandEffect);\n    blightedIslandEffect.addNextState(fearEffect);\n    fearEffect.addNextState(fearEffect);\n    fearEffect.addNextState(ravage);\n    ravage.addNextState(build);\n    build.addNextState(explore);\n    explore.addNextState(advCards);\n    advCards.addNextState(slowPowerPhase);\n    //SLOW POWER PHASE\n    slowPowerPhase.addNextState(playSlowPower);\n    slowPowerPhase.addNextState(timePasses);\n    playSlowPower.addNextState(slowPowerPhase);\n    //TIME PASSES\n    timePasses.addNextState(spiritPhase);\n    timePasses.addNextState(discardFearCards);\n    discardFearCards.addNextState(timePasses);\n\n    this.state={\n      currentState: spiritPhase,\n      currentRound: 1,\n    };\n\n    this.changeState = this.changeState.bind(this);\n  }\n\n  changeState(state) {\n    if(this.state.currentState.name === 'Time Passes' && state.name === 'Spirit Phase (Growth, Energy & Choose Powers)')\n      this.setState({currentRound: this.state.currentRound+1});\n    if(state.nextStates.length === 0)\n    {\n      const modState = new State(state.name, state.time);\n      modState.addNextState(this.state.currentState);\n      modState.addNextState(modState);\n      this.setState({\n        currentState: modState,\n      });\n    }\n    else this.setState({\n      currentState: state,\n    });\n  }\n\n  render() {\n    const { currentState, currentRound } = this.state;\n    return <MyCard round={currentRound} state={currentState} changeState={this.changeState} />;\n  }\n};\n","import React, { Component } from 'react';\nimport GoTStateMachine from './GoTStateMachine';\nimport SpiritIslandStateMachine from './SpiritIslandStateMachine';\n\nclass App extends Component {\n\n  // setup states\n  componentDidMount() {\n    \n  }\n\n  render() {\n    return (\n      <div>\n        <SpiritIslandStateMachine/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}